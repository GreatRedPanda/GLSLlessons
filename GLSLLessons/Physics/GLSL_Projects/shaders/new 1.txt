
float angle=atan(v.y, v.x);    	
if(angle<23 || angle>337 )  nCoords=uvec2(1,0);
else if(angle>23 && angle<68)  nCoords=uvec2(1,1);
else if(angle>68 && angle<113)  nCoords=uvec2(0,1);
else if(angle>113 && angle<158)  nCoords=uvec2(-1,1);
else if(angle>158 && angle<203)  nCoords=uvec2(-1,0);
else if(angle>203 && angle<248)  nCoords=uvec2(-1,-1);
else if(angle>248 && angle<293)  nCoords=uvec2(0,-1);
else if(angle>293 && angle<337)  nCoords=uvec2(1,-1);

















float angle=degrees(atan(v.y, v.x));    	
if(angle<23 || angle>337 )  nCoords=uvec2(1,0);
else if(angle>23 && angle<68)  nCoords=uvec2(1,1);
else if(angle>68 && angle<113)  nCoords=uvec2(0,1);
else if(angle>113 && angle<158)  nCoords=uvec2(-1,1);
else if(angle>158 && angle<203)  nCoords=uvec2(-1,0);
else if(angle>203 && angle<248)  nCoords=uvec2(-1,-1);
else if(angle>248 && angle<293)  nCoords=uvec2(0,-1);
else if(angle>293 && angle<337)  nCoords=uvec2(1,-1);



















vec2 p=position[i];
	uvec2 coords=getCoords(i, 10);
	uint x=coords.x;
	uint y=coords.y;
	vec2 pR=position[getIdx(x+1,y,10)];
    vec2 pL=position[getIdx(x-1,y,10)];
    vec2 pU=position[getIdx(x,y+1,10)];
    vec2 pD=position[getIdx(x,y-1,10)];
	
	
	
	if(length(pL-p)<0.1)
	{
	
	//vec2 dir=normalize(pL-p);
	//v.x+=2*deltaT;
    p.x-=0.1;
	}
	else if(length(pR-p)<0.1)
	{
	
	//vec2 dir=normalize(pR-p);
     p.x+=0.1;
	}
position[i]=p;





    vec2 uv = (gl_FragCoord.xy/vec2(720,720));
	float radius=0.1;
float sm=0.0001;
vec2 size=vec2(0.01);
vec3 col=vec3(0);
for(uint i=0; i<position.length();i++)
{

vec2 pos=position[i];

vec2 diff=uv-pos;
vec2 box= smoothstep(pos-size, pos, uv)-smoothstep(pos,pos+size, uv);

if(box.x>0.0 && box.y>0.0)
col.x+=1;
}


//ladt



  uint idx = gl_GlobalInvocationID.x;
	vec2 p=position[idx];
	vec2 v= velocity [idx];
	
	uvec2 coords=getCoords(idx, 10);

	
	vec2 dir=vec2(0);
	int gravityCoef=1;
	for(uint i=0; i<position.length();i++)
    {
	vec2 dif=position[i]-p;
     if(i!=idx && length(dif)<0.02)
	 {
	  dir+=(position[i]-p);
	  }
	  if(length(dif)>0.02 && dif.y<0.0 && velocity[i].y<0.00001)
	     gravityCoef=0;
    }
	
	
	
	//uint x=coords.x;
	//uint y=coords.y;
	//vec2 pR=position[getIdx(x+1,y,10)];
  //  vec2 pL=position[getIdx(x-1,y,10)];
  //  vec2 pU=position[getIdx(x,y+1,10)];
   // vec2 pD=position[getIdx(x,y-1,10)];
	
	
//	if(length(pR-p)<0.02)
	//dir+=vec2(0.02,0);
	
	//if(length(pL-p)<0.02)
	//dir-=vec2(0.02,0);
	
  // if(length(pU-p)<0.02)
	//dir-=vec2(0.0,0.02);
   // if(length(pD-p)<0.02)
	//dir+=vec2(0.0,0.02);

	v+=dir;

	
	
	float x_off = 0.0f, y_off = 0.0f;
	float dist_sum = 0.0f;

	float radius=0.01;
	
	v.x*=damp;
	v.y+=gravity;
	v.y*=damp;
	
	
	


	//Actually move the particle
	p.x+= x_off + v.x*deltaT;
	p.y+= y_off + v.y*deltaT;


   if(p.x < -1.0f) {
		v.x = -v.x * 0.5f;
		p.x =0.0;
	}
	 if(p.x > SCREEN_WIDTH) 
	{
		v.x = -v.x * 0.5f;
		p.x = SCREEN_WIDTH ;
	}
	if(p.y+radius >= SCREEN_HEIGHT) {
		v.y = -v.y * 0.9995f;
		p.y = SCREEN_HEIGHT ;
	}
    else if(p.y <-1.0f) {
		v.y =-v.y*0.4;
		p.y = -1.0;
	}
	
//vec2 pp=p*100;
//int x=int(pp.x);
//int y=int(pp.y);

//pp=vec2(float(x), float(y));

//p=pp/100.;